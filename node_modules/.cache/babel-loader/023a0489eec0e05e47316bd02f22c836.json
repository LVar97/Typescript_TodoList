{"ast":null,"code":"import { TodosActionTypes } from \"../../types/todo\";\nconst initialState = {\n  todos: [],\n  loading: false,\n  error: null,\n  page: 1,\n  limit: 10\n};\nexport const todosReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TodosActionTypes.FETCH_TODOS:\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case TodosActionTypes.FETCH_TODOS_SUCCESS:\n      return { ...state,\n        loading: false,\n        error: null,\n        todos: action.payload\n      };\n\n    case TodosActionTypes.FETCH_TODOS_ERROR:\n      return { ...state,\n        loading: false,\n        error: action.payload\n      };\n\n    case TodosActionTypes.SET_TODO_PAGE:\n      return { ...state,\n        page: action.payload\n      };\n\n    case TodosActionTypes.SET_TODO_CHANGE:\n      return { ...state,\n        todos: state.todos.map(todo => {\n          if (action.payload.id === todo.id) {}\n        })\n      };\n\n    case TodosActionTypes.SET_TODO_DELETE:\n      return { ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload.id)\n      };\n\n    case TodosActionTypes.SET_TODO_ADD:\n      return { ...state,\n        todos: [action.payload, ...state.todos]\n      };\n\n    case TodosActionTypes.SET_TODO_COMPLETED:\n      return { ...state,\n        todos: state.todos.map(todo => {\n          if (action.payload.id === todo.id) {\n            todo.completed = !todo.completed;\n          }\n\n          return todo;\n        })\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/varvara/Desktop/dev/Project/Typescript_TodoList/src/store/redusers/todosReducer.ts"],"names":["TodosActionTypes","initialState","todos","loading","error","page","limit","todosReducer","state","action","type","FETCH_TODOS","FETCH_TODOS_SUCCESS","payload","FETCH_TODOS_ERROR","SET_TODO_PAGE","SET_TODO_CHANGE","map","todo","id","SET_TODO_DELETE","filter","SET_TODO_ADD","SET_TODO_COMPLETED","completed"],"mappings":"AAAA,SAASA,gBAAT,QAA0D,kBAA1D;AAEA,MAAMC,YAAwB,GAAG;AAChCC,EAAAA,KAAK,EAAE,EADyB;AAEhCC,EAAAA,OAAO,EAAE,KAFuB;AAGhCC,EAAAA,KAAK,EAAE,IAHyB;AAIhCC,EAAAA,IAAI,EAAE,CAJ0B;AAKhCC,EAAAA,KAAK,EAAE;AALyB,CAAjC;AAQA,OAAO,MAAMC,YAAY,GAAG,YAA2D;AAAA,MAA1DC,KAA0D,uEAAlDP,YAAkD;AAAA,MAApCQ,MAAoC;;AACtF,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKV,gBAAgB,CAACW,WAAtB;AACC,aAAO,EAAE,GAAGH,KAAL;AAAYL,QAAAA,OAAO,EAAE,IAArB;AAA2BC,QAAAA,KAAK,EAAE;AAAlC,OAAP;;AACD,SAAKJ,gBAAgB,CAACY,mBAAtB;AACC,aAAO,EAAE,GAAGJ,KAAL;AAAYL,QAAAA,OAAO,EAAE,KAArB;AAA4BC,QAAAA,KAAK,EAAE,IAAnC;AAAyCF,QAAAA,KAAK,EAAEO,MAAM,CAACI;AAAvD,OAAP;;AACD,SAAKb,gBAAgB,CAACc,iBAAtB;AACC,aAAO,EAAE,GAAGN,KAAL;AAAYL,QAAAA,OAAO,EAAE,KAArB;AAA4BC,QAAAA,KAAK,EAAEK,MAAM,CAACI;AAA1C,OAAP;;AACD,SAAKb,gBAAgB,CAACe,aAAtB;AACC,aAAO,EAAE,GAAGP,KAAL;AAAYH,QAAAA,IAAI,EAAEI,MAAM,CAACI;AAAzB,OAAP;;AACD,SAAKb,gBAAgB,CAACgB,eAAtB;AACE,aAAO,EACN,GAAGR,KADG;AAENN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYe,GAAZ,CAAgBC,IAAI,IAAI;AAC9B,cAAIT,MAAM,CAACI,OAAP,CAAeM,EAAf,KAAsBD,IAAI,CAACC,EAA/B,EAAmC,CAElC;AAED,SALM;AAFD,OAAP;;AASF,SAAKnB,gBAAgB,CAACoB,eAAtB;AACC,aAAO,EAAE,GAAGZ,KAAL;AAAYN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYmB,MAAZ,CAAmBH,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYV,MAAM,CAACI,OAAP,CAAeM,EAAtD;AAAnB,OAAP;;AACD,SAAKnB,gBAAgB,CAACsB,YAAtB;AACC,aAAO,EAAE,GAAGd,KAAL;AAAYN,QAAAA,KAAK,EAAE,CAAEO,MAAM,CAACI,OAAT,EAAkB,GAAGL,KAAK,CAACN,KAA3B;AAAnB,OAAP;;AACD,SAAKF,gBAAgB,CAACuB,kBAAtB;AACC,aAAO,EACN,GAAGf,KADG;AAENN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYe,GAAZ,CAAgBC,IAAI,IAAI;AAC9B,cAAIT,MAAM,CAACI,OAAP,CAAeM,EAAf,KAAsBD,IAAI,CAACC,EAA/B,EAAmC;AAClCD,YAAAA,IAAI,CAACM,SAAL,GAAiB,CAACN,IAAI,CAACM,SAAvB;AACA;;AACD,iBAAON,IAAP;AACA,SALM;AAFD,OAAP;;AASD;AACC,aAAOV,KAAP;AAlCF;AAoCA,CArCM","sourcesContent":["import { TodosActionTypes, TodosAction, TodosState } from \"../../types/todo\";\n\nconst initialState: TodosState = {\n\ttodos: [],\n\tloading: false,\n\terror: null,\n\tpage: 1,\n\tlimit: 10,\n}\n\nexport const todosReducer = (state = initialState, action: TodosAction): TodosState => {\n\tswitch (action.type){\n\t\tcase TodosActionTypes.FETCH_TODOS:\n\t\t\treturn { ...state, loading: true, error: null}\n\t\tcase TodosActionTypes.FETCH_TODOS_SUCCESS:\n\t\t\treturn { ...state, loading: false, error: null, todos: action.payload}\n\t\tcase TodosActionTypes.FETCH_TODOS_ERROR:\n\t\t\treturn { ...state, loading: false, error: action.payload}\n\t\tcase TodosActionTypes.SET_TODO_PAGE:\n\t\t\treturn { ...state, page: action.payload}\n\t\tcase TodosActionTypes.SET_TODO_CHANGE:\n\t\t\t\treturn { \n\t\t\t\t\t...state, \n\t\t\t\t\ttodos: state.todos.map(todo => {\n\t\t\t\t\t\tif (action.payload.id === todo.id) {\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t})\n\t\t\t\t}\n\t\tcase TodosActionTypes.SET_TODO_DELETE:\n\t\t\treturn { ...state, todos: state.todos.filter(todo => todo.id !== action.payload.id)}\n\t\tcase TodosActionTypes.SET_TODO_ADD:\n\t\t\treturn { ...state, todos: [ action.payload, ...state.todos]}\n\t\tcase TodosActionTypes.SET_TODO_COMPLETED:\n\t\t\treturn { \n\t\t\t\t...state, \n\t\t\t\ttodos: state.todos.map(todo => {\n\t\t\t\t\tif (action.payload.id === todo.id) {\n\t\t\t\t\t\ttodo.completed = !todo.completed\n\t\t\t\t\t}\n\t\t\t\t\treturn todo\n\t\t\t\t})\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}"]},"metadata":{},"sourceType":"module"}