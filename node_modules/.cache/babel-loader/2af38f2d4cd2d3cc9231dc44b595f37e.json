{"ast":null,"code":"var _jsxFileName = \"/Users/varvara/Desktop/dev/Project/Typescript_TodoList/src/pages/TodosPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { TodoForm } from '../components/TodoForm';\nimport { TodoList } from '../components/TodoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TodosPage = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]');\n    setTodos(saved);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]); // const addHandler = (title: string) => {\n  //   const newTodo: ITodo = {\n  //     title: title,\n  //     id: Date.now(),\n  //     completed: false\n  //   }\n  //   setTodos(prev => [newTodo, ...prev])\n  // }\n  // const toggleHandler = (id: number) => {\n  //   setTodos(prev => prev.map(todo => {\n  //     if (todo.id === id) {\n  //       todo.completed = !todo.completed\n  //     }\n  //     return todo\n  //   }))\n  // }\n  // const removeHandler = (id: number) =>  {\n  //   const shouldRemove = window.confirm('Вы уверены?')\n  //   if (shouldRemove) {\n  //     setTodos(prev => prev.filter(todo => todo.id !== id))\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      onAdd: addHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(TodoList // todos={todos}\n    // onToggle={toggleHandler}\n    // onRemove={removeHandler}\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodosPage, \"JPZTns5sUK6f8sNf0ff2EvpSbn0=\");\n\n_c = TodosPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosPage\");","map":{"version":3,"sources":["/Users/varvara/Desktop/dev/Project/Typescript_TodoList/src/pages/TodosPage.tsx"],"names":["React","useState","useEffect","TodoForm","TodoList","TodosPage","todos","setTodos","saved","JSON","parse","localStorage","getItem","setItem","stringify","addHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,QAAT,QAAyB,wBAAzB;;;AAGA,OAAO,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAExC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAU,EAAV,CAAlC;AAECC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,IAA5C,CAAd;AACAL,IAAAA,QAAQ,CAACC,KAAD,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAN,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,SAAL,CAAeR,KAAf,CAA9B;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CATuC,CAavC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAED,sBACC;AAAA,4BACC,QAAC,QAAD;AAAU,MAAA,KAAK,EAAES;AAAjB;AAAA;AAAA;AAAA;AAAA,YADD,eAEC,QAAC,QAAD,CACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA,kBADD;AAUA,CAjDM;;GAAMV,S;;KAAAA,S","sourcesContent":["import React,  {useState, useEffect} from \"react\";\nimport { TodoForm } from '../components/TodoForm';\nimport { TodoList } from '../components/TodoList';\nimport { ITodo } from '../Interfaces';\n\nexport const TodosPage: React.FC = () => {\n\n\tconst [todos, setTodos] = useState<ITodo[]>([]);\n\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[];\n    setTodos(saved);\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }, [todos])\n\n  // const addHandler = (title: string) => {\n  //   const newTodo: ITodo = {\n  //     title: title,\n  //     id: Date.now(),\n  //     completed: false\n  //   }\n    \n  //   setTodos(prev => [newTodo, ...prev])\n  // }\n\n  // const toggleHandler = (id: number) => {\n  //   setTodos(prev => prev.map(todo => {\n  //     if (todo.id === id) {\n  //       todo.completed = !todo.completed\n  //     }\n  //     return todo\n  //   }))\n  // }\n\n  // const removeHandler = (id: number) =>  {\n  //   const shouldRemove = window.confirm('Вы уверены?')\n  //   if (shouldRemove) {\n  //     setTodos(prev => prev.filter(todo => todo.id !== id))\n  //   }\n  // }\n\n\treturn (\n\t\t<>\n\t\t\t<TodoForm onAdd={addHandler}/>\n\t\t\t<TodoList \n\t\t\t// todos={todos}\n\t\t\t// onToggle={toggleHandler}\n\t\t\t// onRemove={removeHandler}\n\t\t\t/>\n\t\t</>\n\t)\n};"]},"metadata":{},"sourceType":"module"}