{"ast":null,"code":"var _jsxFileName = \"/Users/varvara/Desktop/dev/Project/Typescript_TodoList/src/pages/TodosPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TodoForm } from '../components/TodoForm';\nimport { TodoList } from '../components/TodoList';\nimport { TodoPopup } from \"../components/TodoPopup\";\nimport { useActions } from \"../hook/useActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TodosPage = () => {\n  _s();\n\n  const [todo, setTodo] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    setTodoAdd,\n    setTodoDelete,\n    setTodoChange,\n    setTodoCompleted\n  } = useActions();\n\n  const isTodoPopupOpened = todo => {\n    setIsOpen(!isOpen);\n    setTodo(todo);\n  };\n\n  console.log(todo);\n\n  const addTodo = title => {\n    const newTodo = {\n      userId: 1,\n      id: Date.now(),\n      title,\n      completed: false\n    };\n    setTodoAdd(newTodo);\n  };\n\n  const changeTodo = title => {\n    console.log(title);\n    setTodoChange(title);\n  };\n\n  const toggleHandler = todo => {\n    setTodoCompleted(todo);\n  };\n\n  const removeHandler = todo => {\n    const shouldRemove = window.confirm('Вы уверены?');\n\n    if (shouldRemove) {\n      setTodoDelete(todo);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      onAdd: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      onToggle: toggleHandler,\n      onOpen: isTodoPopupOpened,\n      onRemove: removeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(TodoPopup, {\n      isOpen: isOpen,\n      onChange: changeTodo,\n      todo: todo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodosPage, \"co4iCFT3r2cpsEOoly6aXn2uaBc=\", false, function () {\n  return [useActions];\n});\n\n_c = TodosPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosPage\");","map":{"version":3,"sources":["/Users/varvara/Desktop/dev/Project/Typescript_TodoList/src/pages/TodosPage.tsx"],"names":["React","useState","TodoForm","TodoList","TodoPopup","useActions","TodosPage","todo","setTodo","isOpen","setIsOpen","setTodoAdd","setTodoDelete","setTodoChange","setTodoCompleted","isTodoPopupOpened","console","log","addTodo","title","newTodo","userId","id","Date","now","completed","changeTodo","toggleHandler","removeHandler","shouldRemove","window","confirm"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA0C,OAA1C;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;;;AAGA,OAAO,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAEvC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAa,EAAb,CAAhC;AAEA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM;AAACU,IAAAA,UAAD;AAAaC,IAAAA,aAAb;AAA4BC,IAAAA,aAA5B;AAA2CC,IAAAA;AAA3C,MAA+DT,UAAU,EAA/E;;AAEA,QAAMU,iBAAiB,GAAIR,IAAD,IAAiB;AACzCG,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AAEAD,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD,GAJD;;AAKAS,EAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;;AACA,QAAMW,OAAO,GAAIC,KAAD,IAAmB;AACjC,UAAMC,OAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,CADa;AAErBC,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAFiB;AAGrBL,MAAAA,KAHqB;AAIrBM,MAAAA,SAAS,EAAE;AAJU,KAAvB;AAMAd,IAAAA,UAAU,CAACS,OAAD,CAAV;AACD,GARD;;AAUA,QAAMM,UAAU,GAAIP,KAAD,IAAmB;AACpCH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACAN,IAAAA,aAAa,CAACM,KAAD,CAAb;AACD,GAHD;;AAMA,QAAMQ,aAAa,GAAIpB,IAAD,IAAiB;AACrCO,IAAAA,gBAAgB,CAACP,IAAD,CAAhB;AACD,GAFD;;AAIA,QAAMqB,aAAa,GAAIrB,IAAD,IAAkB;AACtC,UAAMsB,YAAY,GAAGC,MAAM,CAACC,OAAP,CAAe,aAAf,CAArB;;AACA,QAAIF,YAAJ,EAAkB;AAChBjB,MAAAA,aAAa,CAACL,IAAD,CAAb;AACD;AACF,GALD;;AAOD,sBACC;AAAA,4BACC,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEW;AAAjB;AAAA;AAAA;AAAA;AAAA,YADD,eAEC,QAAC,QAAD;AACA,MAAA,QAAQ,EAAES,aADV;AAEG,MAAA,MAAM,EAAEZ,iBAFX;AAGA,MAAA,QAAQ,EAAEa;AAHV;AAAA;AAAA;AAAA;AAAA,YAFD,eAOI,QAAC,SAAD;AACA,MAAA,MAAM,EAAEnB,MADR;AAEA,MAAA,QAAQ,EAAEiB,UAFV;AAGA,MAAA,IAAI,EAAEnB;AAHN;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA,kBADD;AAeA,CAvDM;;GAAMD,S;UAK0DD,U;;;KAL1DC,S","sourcesContent":["import React,  {useState, useEffect} from \"react\";\nimport { TodoForm } from '../components/TodoForm';\nimport { TodoList } from '../components/TodoList';\nimport { TodoPopup } from \"../components/TodoPopup\";\nimport { useActions } from \"../hook/useActions\";\nimport { ITodo } from '../Interfaces';\n\nexport const TodosPage: React.FC = () => {\n\n  const [todo, setTodo] = useState<ITodo | []>([]);\n\n  const [isOpen, setIsOpen] = useState(false);\n  const {setTodoAdd, setTodoDelete, setTodoChange, setTodoCompleted} = useActions();\n\n  const isTodoPopupOpened = (todo: ITodo) => {\n    setIsOpen(!isOpen);\n    \n    setTodo(todo)\n  }\n  console.log(todo)\n  const addTodo = (title: string) => {\n    const newTodo: ITodo = {\n      userId: 1,\n      id: Date.now(),\n      title,\n      completed: false\n    }\n    setTodoAdd(newTodo);\n  }\n\n  const changeTodo = (title: string) => {\n    console.log(title)\n    setTodoChange(title);\n  }\n\n\n  const toggleHandler = (todo: ITodo) => {\n    setTodoCompleted(todo);\n  }\n\n  const removeHandler = (todo: ITodo) =>  {\n    const shouldRemove = window.confirm('Вы уверены?')\n    if (shouldRemove) {\n      setTodoDelete(todo);\n    }\n  }\n\n\treturn (\n\t\t<>\n\t\t\t<TodoForm onAdd={addTodo}/>\n\t\t\t<TodoList \n\t\t\tonToggle={toggleHandler}\n      onOpen={isTodoPopupOpened}\n\t\t\tonRemove={removeHandler}\n\t\t\t/>\n      <TodoPopup \n      isOpen={isOpen}\n      onChange={changeTodo}\n      todo={todo}\n      />\n\t\t</>\n\t)\n};"]},"metadata":{},"sourceType":"module"}