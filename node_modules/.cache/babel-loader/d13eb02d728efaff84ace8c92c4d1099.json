{"ast":null,"code":"var _jsxFileName = \"/Users/varvara/Desktop/dev/Project/Typescript_TodoList/src/pages/TodosPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { TodoForm } from '../components/TodoForm';\nimport { TodoList } from '../components/TodoList';\nimport { useActions } from \"../hook/useActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TodosPage = () => {\n  _s();\n\n  // const [todos, setTodos] = useState<ITodo[]>([]);\n  const {\n    setTodoAdd,\n    setTodoDelete,\n    setTodoChange\n  } = useActions(); // useEffect(() => {\n  //   const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[];\n  //   setTodos(saved);\n  // }, [])\n  // useEffect(() => {\n  //   localStorage.setItem('todos', JSON.stringify(todos))\n  // }, [todos])\n\n  const addTodo = title => {\n    const newTodo = {\n      userId: 1,\n      id: Date.now(),\n      title,\n      completed: false\n    };\n    setTodoAdd(newTodo);\n  };\n\n  const changeTodo = todos => {\n    setTodoChange(todos);\n  };\n\n  const toggleHandler = id => {// setTodos(prev => prev.map(todo => {\n    //   if (todo.id === id) {\n    //     todo.completed = !todo.completed\n    //   }\n    //   return todo\n    // }))\n  };\n\n  const removeHandler = todo => {\n    const shouldRemove = window.confirm('Вы уверены?');\n\n    if (shouldRemove) {\n      setTodoDelete(todo);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoForm, {\n      onAdd: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(TodoList // todos={todos}\n    // onToggle={toggleHandler}\n    , {\n      onRemove: removeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodosPage, \"TH+sfLA4LOeejWtFrXNnRRdQ5TA=\", false, function () {\n  return [useActions];\n});\n\n_c = TodosPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodosPage\");","map":{"version":3,"sources":["/Users/varvara/Desktop/dev/Project/Typescript_TodoList/src/pages/TodosPage.tsx"],"names":["React","TodoForm","TodoList","useActions","TodosPage","setTodoAdd","setTodoDelete","setTodoChange","addTodo","title","newTodo","userId","id","Date","now","completed","changeTodo","todos","toggleHandler","removeHandler","todo","shouldRemove","window","confirm"],"mappings":";;;AAAA,OAAOA,KAAP,MAA0C,OAA1C;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,UAAT,QAA2B,oBAA3B;;;AAGA,OAAO,MAAMC,SAAmB,GAAG,MAAM;AAAA;;AAExC;AACC,QAAM;AAACC,IAAAA,UAAD;AAAaC,IAAAA,aAAb;AAA4BC,IAAAA;AAA5B,MAA6CJ,UAAU,EAA7D,CAHuC,CAKvC;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,QAAMK,OAAO,GAAIC,KAAD,IAAmB;AACjC,UAAMC,OAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,CADa;AAErBC,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAFiB;AAGrBL,MAAAA,KAHqB;AAIrBM,MAAAA,SAAS,EAAE;AAJU,KAAvB;AAMAV,IAAAA,UAAU,CAACK,OAAD,CAAV;AACD,GARD;;AAUA,QAAMM,UAAU,GAAIC,KAAD,IAAoB;AACrCV,IAAAA,aAAa,CAACU,KAAD,CAAb;AACD,GAFD;;AAKA,QAAMC,aAAa,GAAIN,EAAD,IAAgB,CAEpC;AACA;AACA;AACA;AACA;AACA;AACD,GARD;;AAUA,QAAMO,aAAa,GAAIC,IAAD,IAAkB;AACtC,UAAMC,YAAY,GAAGC,MAAM,CAACC,OAAP,CAAe,aAAf,CAArB;;AACA,QAAIF,YAAJ,EAAkB;AAChBf,MAAAA,aAAa,CAACc,IAAD,CAAb;AACD;AACF,GALD;;AAOD,sBACC;AAAA,4BACC,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEZ;AAAjB;AAAA;AAAA;AAAA;AAAA,YADD,eAEC,QAAC,QAAD,CACA;AACA;AAFA;AAIA,MAAA,QAAQ,EAAEW;AAJV;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA,kBADD;AAWA,CAzDM;;GAAMf,S;UAGwCD,U;;;KAHxCC,S","sourcesContent":["import React,  {useState, useEffect} from \"react\";\nimport { TodoForm } from '../components/TodoForm';\nimport { TodoList } from '../components/TodoList';\nimport { useActions } from \"../hook/useActions\";\nimport { ITodo } from '../Interfaces';\n\nexport const TodosPage: React.FC = () => {\n\n\t// const [todos, setTodos] = useState<ITodo[]>([]);\n  const {setTodoAdd, setTodoDelete, setTodoChange} = useActions();\n\n  // useEffect(() => {\n  //   const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[];\n  //   setTodos(saved);\n  // }, [])\n\n  // useEffect(() => {\n  //   localStorage.setItem('todos', JSON.stringify(todos))\n  // }, [todos])\n\n  const addTodo = (title: string) => {\n    const newTodo: ITodo = {\n      userId: 1,\n      id: Date.now(),\n      title,\n      completed: false\n    }\n    setTodoAdd(newTodo);\n  }\n\n  const changeTodo = (todos: ITodo[]) => {\n    setTodoChange(todos);\n  }\n\n\n  const toggleHandler = (id: number) => {\n    \n    // setTodos(prev => prev.map(todo => {\n    //   if (todo.id === id) {\n    //     todo.completed = !todo.completed\n    //   }\n    //   return todo\n    // }))\n  }\n\n  const removeHandler = (todo: ITodo) =>  {\n    const shouldRemove = window.confirm('Вы уверены?')\n    if (shouldRemove) {\n      setTodoDelete(todo);\n    }\n  }\n\n\treturn (\n\t\t<>\n\t\t\t<TodoForm onAdd={addTodo}/>\n\t\t\t<TodoList \n\t\t\t// todos={todos}\n\t\t\t// onToggle={toggleHandler}\n      \n\t\t\tonRemove={removeHandler}\n\t\t\t/>\n\t\t</>\n\t)\n};"]},"metadata":{},"sourceType":"module"}