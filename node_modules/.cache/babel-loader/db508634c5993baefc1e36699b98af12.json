{"ast":null,"code":"import axios from \"axios\";\nimport { TodosActionTypes } from \"../../types/todo\";\nexport const fetchTodos = function () {\n  let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  return async dispatch => {\n    try {\n      dispatch({\n        type: TodosActionTypes.FETCH_TODOS\n      });\n      const response = await axios.get('https://jsonplaceholder.typicode.com/todos', {\n        params: {\n          _page: page,\n          _limit: limit\n        }\n      });\n      setTimeout(() => {\n        dispatch({\n          type: TodosActionTypes.FETCH_TODOS_SUCCESS,\n          payload: response.data\n        });\n      }, 500); // dispatch({type: TodosActionTypes.FETCH_TODOS_SUCCESS, payload: response.data});\n    } catch (e) {\n      dispatch({\n        type: TodosActionTypes.FETCH_TODOS_ERROR,\n        payload: 'Произошла ошибка при загрузки списка дел'\n      });\n    }\n  };\n};\nexport function setTodoPage(page) {\n  return {\n    type: TodosActionTypes.SET_TODO_PAGE,\n    payload: page\n  };\n} // export function setTodoChange (title: string): TodosAction {\n// \treturn {type: TodosActionTypes.SET_TODO_CHANGE, payload: title}\n// }\n// export function setTodoDelete (todo: ITodo): TodosAction {\n// \treturn {\n// \t\ttype: TodosActionTypes.SET_TODO_DELETE, \n// \t\tpayload: prev => prev.filter(todo => todo.id !== id)}\n// }\n\nexport function setTodoAdd(_ref) {\n  let {\n    todo\n  } = _ref;\n  return {\n    type: TodosActionTypes.SET_TODO_ADD,\n    todo\n  };\n}","map":{"version":3,"sources":["/Users/varvara/Desktop/dev/Project/Typescript_TodoList/src/store/acrtion-creators/todos.ts"],"names":["axios","TodosActionTypes","fetchTodos","page","limit","dispatch","type","FETCH_TODOS","response","get","params","_page","_limit","setTimeout","FETCH_TODOS_SUCCESS","payload","data","e","FETCH_TODOS_ERROR","setTodoPage","SET_TODO_PAGE","setTodoAdd","todo","SET_TODO_ADD"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAA8C,kBAA9C;AAIA,OAAO,MAAMC,UAAU,GAAG,YAA0B;AAAA,MAAzBC,IAAyB,uEAAlB,CAAkB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AACnD,SAAO,MAAOC,QAAP,IAA2C;AACjD,QAAI;AACHA,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAEL,gBAAgB,CAACM;AAAxB,OAAD,CAAR;AACA,YAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAU,4CAAV,EAAwD;AAC9EC,QAAAA,MAAM,EAAE;AACPC,UAAAA,KAAK,EAAER,IADA;AAEPS,UAAAA,MAAM,EAAER;AAFD;AADsE,OAAxD,CAAvB;AAOAS,MAAAA,UAAU,CAAC,MAAM;AAChBR,QAAAA,QAAQ,CAAC;AAACC,UAAAA,IAAI,EAAEL,gBAAgB,CAACa,mBAAxB;AAA6CC,UAAAA,OAAO,EAAEP,QAAQ,CAACQ;AAA/D,SAAD,CAAR;AACC,OAFQ,EAEN,GAFM,CAAV,CATG,CAYH;AACA,KAbD,CAaE,OAAOC,CAAP,EAAU;AACXZ,MAAAA,QAAQ,CAAC;AACRC,QAAAA,IAAI,EAAEL,gBAAgB,CAACiB,iBADf;AAERH,QAAAA,OAAO,EAAE;AAFD,OAAD,CAAR;AAGA;AACD,GAnBD;AAoBA,CArBM;AAuBP,OAAO,SAASI,WAAT,CAAsBhB,IAAtB,EAAiD;AACvD,SAAO;AAACG,IAAAA,IAAI,EAAEL,gBAAgB,CAACmB,aAAxB;AAAuCL,IAAAA,OAAO,EAAEZ;AAAhD,GAAP;AACA,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASkB,UAAT,OAAiD;AAAA,MAA5B;AAACC,IAAAA;AAAD,GAA4B;AACvD,SAAO;AAAChB,IAAAA,IAAI,EAAEL,gBAAgB,CAACsB,YAAxB;AAAsCD,IAAAA;AAAtC,GAAP;AACA","sourcesContent":["import axios from \"axios\";\nimport { Dispatch } from \"react\";\nimport { TodosActionTypes, TodosAction } from \"../../types/todo\";\nimport { ITodo } from '../../Interfaces';\n\n\nexport const fetchTodos = (page = 1, limit = 10) => {\n\treturn async (dispatch: Dispatch<TodosAction>) => {\n\t\ttry {\n\t\t\tdispatch({type: TodosActionTypes.FETCH_TODOS});\n\t\t\tconst response = await axios.get('https://jsonplaceholder.typicode.com/todos', {\n\t\t\t\tparams: {\n\t\t\t\t\t_page: page,\n\t\t\t\t\t_limit: limit,\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tdispatch({type: TodosActionTypes.FETCH_TODOS_SUCCESS, payload: response.data}\n\t\t\t)}, 500);\n\t\t\t// dispatch({type: TodosActionTypes.FETCH_TODOS_SUCCESS, payload: response.data});\n\t\t} catch (e) {\n\t\t\tdispatch({\n\t\t\t\ttype: TodosActionTypes.FETCH_TODOS_ERROR, \n\t\t\t\tpayload: 'Произошла ошибка при загрузки списка дел'})\n\t\t}\n\t}\n};\n\nexport function setTodoPage (page: number): TodosAction {\n\treturn {type: TodosActionTypes.SET_TODO_PAGE, payload: page}\n}\n\n// export function setTodoChange (title: string): TodosAction {\n// \treturn {type: TodosActionTypes.SET_TODO_CHANGE, payload: title}\n// }\n\n// export function setTodoDelete (todo: ITodo): TodosAction {\n// \treturn {\n// \t\ttype: TodosActionTypes.SET_TODO_DELETE, \n// \t\tpayload: prev => prev.filter(todo => todo.id !== id)}\n// }\n\nexport function setTodoAdd ({todo}: ITodo): TodosAction {\n\treturn {type: TodosActionTypes.SET_TODO_ADD, todo}\n}\n"]},"metadata":{},"sourceType":"module"}